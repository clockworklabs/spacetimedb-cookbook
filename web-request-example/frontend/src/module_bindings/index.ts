// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  type CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  type ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  type SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddKnownIdentity } from "./add_known_identity_reducer.ts";
export { AddKnownIdentity };
import { ClearWeather } from "./clear_weather_reducer.ts";
export { ClearWeather };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { RequestWeather } from "./request_weather_reducer.ts";
export { RequestWeather };
import { ReturnWeather } from "./return_weather_reducer.ts";
export { ReturnWeather };

// Import and reexport all table handle types
import { KnownIdentitiesTableHandle } from "./known_identities_table.ts";
export { KnownIdentitiesTableHandle };
import { WeatherTableHandle } from "./weather_table.ts";
export { WeatherTableHandle };
import { WebRequestsTableHandle } from "./web_requests_table.ts";
export { WebRequestsTableHandle };

// Import and reexport all types
import { Hourly } from "./hourly_type.ts";
export { Hourly };
import { HourlyUnits } from "./hourly_units_type.ts";
export { HourlyUnits };
import { KnownIdentities } from "./known_identities_type.ts";
export { KnownIdentities };
import { RequestType } from "./request_type_type.ts";
export { RequestType };
import { Weather } from "./weather_type.ts";
export { Weather };
import { WebRequest } from "./web_request_type.ts";
export { WebRequest };

const REMOTE_MODULE = {
  tables: {
    KnownIdentities: {
      tableName: "KnownIdentities",
      rowType: KnownIdentities.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    Weather: {
      tableName: "Weather",
      rowType: Weather.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    WebRequests: {
      tableName: "WebRequests",
      rowType: WebRequest.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    AddKnownIdentity: {
      reducerName: "AddKnownIdentity",
      argsType: AddKnownIdentity.getTypeScriptAlgebraicType(),
    },
    ClearWeather: {
      reducerName: "ClearWeather",
      argsType: ClearWeather.getTypeScriptAlgebraicType(),
    },
    ClientConnected: {
      reducerName: "ClientConnected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    RequestWeather: {
      reducerName: "RequestWeather",
      argsType: RequestWeather.getTypeScriptAlgebraicType(),
    },
    ReturnWeather: {
      reducerName: "ReturnWeather",
      argsType: ReturnWeather.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddKnownIdentity", args: AddKnownIdentity }
| { name: "ClearWeather", args: ClearWeather }
| { name: "ClientConnected", args: ClientConnected }
| { name: "RequestWeather", args: RequestWeather }
| { name: "ReturnWeather", args: ReturnWeather }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addKnownIdentity(identity: string) {
    const __args = { identity };
    let __writer = new BinaryWriter(1024);
    AddKnownIdentity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddKnownIdentity", __argsBuffer, this.setCallReducerFlags.addKnownIdentityFlags);
  }

  onAddKnownIdentity(callback: (ctx: ReducerEventContext, identity: string) => void) {
    this.connection.onReducer("AddKnownIdentity", callback);
  }

  removeOnAddKnownIdentity(callback: (ctx: ReducerEventContext, identity: string) => void) {
    this.connection.offReducer("AddKnownIdentity", callback);
  }

  clearWeather() {
    this.connection.callReducer("ClearWeather", new Uint8Array(0), this.setCallReducerFlags.clearWeatherFlags);
  }

  onClearWeather(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClearWeather", callback);
  }

  removeOnClearWeather(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClearWeather", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientConnected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientConnected", callback);
  }

  requestWeather(latitude: string, longitude: string) {
    const __args = { latitude, longitude };
    let __writer = new BinaryWriter(1024);
    RequestWeather.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("RequestWeather", __argsBuffer, this.setCallReducerFlags.requestWeatherFlags);
  }

  onRequestWeather(callback: (ctx: ReducerEventContext, latitude: string, longitude: string) => void) {
    this.connection.onReducer("RequestWeather", callback);
  }

  removeOnRequestWeather(callback: (ctx: ReducerEventContext, latitude: string, longitude: string) => void) {
    this.connection.offReducer("RequestWeather", callback);
  }

  returnWeather(response: string) {
    const __args = { response };
    let __writer = new BinaryWriter(1024);
    ReturnWeather.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ReturnWeather", __argsBuffer, this.setCallReducerFlags.returnWeatherFlags);
  }

  onReturnWeather(callback: (ctx: ReducerEventContext, response: string) => void) {
    this.connection.onReducer("ReturnWeather", callback);
  }

  removeOnReturnWeather(callback: (ctx: ReducerEventContext, response: string) => void) {
    this.connection.offReducer("ReturnWeather", callback);
  }

}

export class SetReducerFlags {
  addKnownIdentityFlags: CallReducerFlags = 'FullUpdate';
  addKnownIdentity(flags: CallReducerFlags) {
    this.addKnownIdentityFlags = flags;
  }

  clearWeatherFlags: CallReducerFlags = 'FullUpdate';
  clearWeather(flags: CallReducerFlags) {
    this.clearWeatherFlags = flags;
  }

  requestWeatherFlags: CallReducerFlags = 'FullUpdate';
  requestWeather(flags: CallReducerFlags) {
    this.requestWeatherFlags = flags;
  }

  returnWeatherFlags: CallReducerFlags = 'FullUpdate';
  returnWeather(flags: CallReducerFlags) {
    this.returnWeatherFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get knownIdentities(): KnownIdentitiesTableHandle {
    return new KnownIdentitiesTableHandle(this.connection.clientCache.getOrCreateTable<KnownIdentities>(REMOTE_MODULE.tables.KnownIdentities));
  }

  get weather(): WeatherTableHandle {
    return new WeatherTableHandle(this.connection.clientCache.getOrCreateTable<Weather>(REMOTE_MODULE.tables.Weather));
  }

  get webRequests(): WebRequestsTableHandle {
    return new WebRequestsTableHandle(this.connection.clientCache.getOrCreateTable<WebRequest>(REMOTE_MODULE.tables.WebRequests));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
